// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modals should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Modals
    modalsConfig={
        Array [
            Object {
              "body": "bar",
              "buttons": Array [
                Object {
                  "callback": [Function],
                  "label": "Save",
                },
              ],
              "key": "1",
              "show": true,
              "title": "foo",
            },
            Object {
              "body": "",
              "buttons": Array [],
              "key": "2",
              "show": false,
              "title": "",
            },
            Object {
              "content": <div>
                Test
        </div>,
              "key": "3",
              "show": true,
            },
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
                    ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={true}
>
          <Unknown>
                    <ModalHeader
                              bsClass="modal-header"
                              closeButton={false}
                              closeLabel="Close"
                    >
                              <ModalTitle
                                        bsClass="modal-title"
                                        componentClass="h4"
                              >
                                        foo
                              </ModalTitle>
                    </ModalHeader>
                    <ModalBody
                              bsClass="modal-body"
                              componentClass="div"
                    >
                              bar
                    </ModalBody>
                    <ModalFooter
                              bsClass="modal-footer"
                              componentClass="div"
                    >
                              <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsStyle="default"
                                        disabled={false}
                                        onClick={[Function]}
                              >
                                        button.label
                              </Button>
                    </ModalFooter>
          </Unknown>
</Modal>,
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
                    ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
>
          <Unknown>
                    <ModalHeader
                              bsClass="modal-header"
                              closeButton={false}
                              closeLabel="Close"
                    >
                              <ModalTitle
                                        bsClass="modal-title"
                                        componentClass="h4"
                              />
                    </ModalHeader>
                    <ModalBody
                              bsClass="modal-body"
                              componentClass="div"
                    />
                    <ModalFooter
                              bsClass="modal-footer"
                              componentClass="div"
                    >
                              
                    </ModalFooter>
          </Unknown>
</Modal>,
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
                    ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={true}
>
          <div>
                    Test
          </div>
</Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": <Unknown>
            <ModalHeader
                        bsClass="modal-header"
                        closeButton={false}
                        closeLabel="Close"
            >
                        <ModalTitle
                                    bsClass="modal-title"
                                    componentClass="h4"
                        >
                                    foo
                        </ModalTitle>
            </ModalHeader>
            <ModalBody
                        bsClass="modal-body"
                        componentClass="div"
            >
                        bar
            </ModalBody>
            <ModalFooter
                        bsClass="modal-footer"
                        componentClass="div"
            >
                        <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="default"
                                    disabled={false}
                                    onClick={[Function]}
                        >
                                    button.label
                        </Button>
            </ModalFooter>
</Unknown>,
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ModalHeader
                bsClass="modal-header"
                closeButton={false}
                closeLabel="Close"
>
                <ModalTitle
                                bsClass="modal-title"
                                componentClass="h4"
                >
                                foo
                </ModalTitle>
</ModalHeader>,
              <ModalBody
                bsClass="modal-body"
                componentClass="div"
>
                bar
</ModalBody>,
              <ModalFooter
                bsClass="modal-footer"
                componentClass="div"
>
                <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                disabled={false}
                                onClick={[Function]}
                >
                                button.label
                </Button>
</ModalFooter>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-header",
                "children": <ModalTitle
                  bsClass="modal-title"
                  componentClass="h4"
>
                  foo
</ModalTitle>,
                "closeButton": false,
                "closeLabel": "Close",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-title",
                  "children": "foo",
                  "componentClass": "h4",
                },
                "ref": null,
                "rendered": "foo",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-body",
                "children": "bar",
                "componentClass": "div",
              },
              "ref": null,
              "rendered": "bar",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-footer",
                "children": Array [
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    disabled={false}
                    onClick={[Function]}
>
                    button.label
</Button>,
                ],
                "componentClass": "div",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "Save",
                  "nodeType": "class",
                  "props": Object {
                    "active": false,
                    "block": false,
                    "bsClass": "btn",
                    "bsStyle": "default",
                    "children": "button.label",
                    "disabled": false,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "button.label",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": Symbol(react.fragment),
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": <Unknown>
            <ModalHeader
                        bsClass="modal-header"
                        closeButton={false}
                        closeLabel="Close"
            >
                        <ModalTitle
                                    bsClass="modal-title"
                                    componentClass="h4"
                        />
            </ModalHeader>
            <ModalBody
                        bsClass="modal-body"
                        componentClass="div"
            />
            <ModalFooter
                        bsClass="modal-footer"
                        componentClass="div"
            >
                        
            </ModalFooter>
</Unknown>,
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ModalHeader
                bsClass="modal-header"
                closeButton={false}
                closeLabel="Close"
>
                <ModalTitle
                                bsClass="modal-title"
                                componentClass="h4"
                />
</ModalHeader>,
              <ModalBody
                bsClass="modal-body"
                componentClass="div"
/>,
              <ModalFooter
                bsClass="modal-footer"
                componentClass="div"
>
                
</ModalFooter>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-header",
                "children": <ModalTitle
                  bsClass="modal-title"
                  componentClass="h4"
/>,
                "closeButton": false,
                "closeLabel": "Close",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-title",
                  "children": "",
                  "componentClass": "h4",
                },
                "ref": null,
                "rendered": "",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-body",
                "children": "",
                "componentClass": "div",
              },
              "ref": null,
              "rendered": "",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-footer",
                "children": Array [],
                "componentClass": "div",
              },
              "ref": null,
              "rendered": Array [],
              "type": [Function],
            },
          ],
          "type": Symbol(react.fragment),
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "3",
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": <div>
            Test
</div>,
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Test",
          },
          "ref": null,
          "rendered": "Test",
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Modal
            animation={true}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
                        ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={true}
>
            <Unknown>
                        <ModalHeader
                                    bsClass="modal-header"
                                    closeButton={false}
                                    closeLabel="Close"
                        >
                                    <ModalTitle
                                                bsClass="modal-title"
                                                componentClass="h4"
                                    >
                                                foo
                                    </ModalTitle>
                        </ModalHeader>
                        <ModalBody
                                    bsClass="modal-body"
                                    componentClass="div"
                        >
                                    bar
                        </ModalBody>
                        <ModalFooter
                                    bsClass="modal-footer"
                                    componentClass="div"
                        >
                                    <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsStyle="default"
                                                disabled={false}
                                                onClick={[Function]}
                                    >
                                                button.label
                                    </Button>
                        </ModalFooter>
            </Unknown>
</Modal>,
          <Modal
            animation={true}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
                        ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
>
            <Unknown>
                        <ModalHeader
                                    bsClass="modal-header"
                                    closeButton={false}
                                    closeLabel="Close"
                        >
                                    <ModalTitle
                                                bsClass="modal-title"
                                                componentClass="h4"
                                    />
                        </ModalHeader>
                        <ModalBody
                                    bsClass="modal-body"
                                    componentClass="div"
                        />
                        <ModalFooter
                                    bsClass="modal-footer"
                                    componentClass="div"
                        >
                                    
                        </ModalFooter>
            </Unknown>
</Modal>,
          <Modal
            animation={true}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
                        ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={true}
>
            <div>
                        Test
            </div>
</Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "animation": true,
            "autoFocus": true,
            "backdrop": true,
            "bsClass": "modal",
            "children": <Unknown>
              <ModalHeader
                            bsClass="modal-header"
                            closeButton={false}
                            closeLabel="Close"
              >
                            <ModalTitle
                                          bsClass="modal-title"
                                          componentClass="h4"
                            >
                                          foo
                            </ModalTitle>
              </ModalHeader>
              <ModalBody
                            bsClass="modal-body"
                            componentClass="div"
              >
                            bar
              </ModalBody>
              <ModalFooter
                            bsClass="modal-footer"
                            componentClass="div"
              >
                            <Button
                                          active={false}
                                          block={false}
                                          bsClass="btn"
                                          bsStyle="default"
                                          disabled={false}
                                          onClick={[Function]}
                            >
                                          button.label
                            </Button>
              </ModalFooter>
</Unknown>,
            "dialogComponentClass": [Function],
            "enforceFocus": true,
            "keyboard": true,
            "manager": ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            },
            "onHide": [Function],
            "renderBackdrop": [Function],
            "restoreFocus": true,
            "show": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ModalHeader
                  bsClass="modal-header"
                  closeButton={false}
                  closeLabel="Close"
>
                  <ModalTitle
                                    bsClass="modal-title"
                                    componentClass="h4"
                  >
                                    foo
                  </ModalTitle>
</ModalHeader>,
                <ModalBody
                  bsClass="modal-body"
                  componentClass="div"
>
                  bar
</ModalBody>,
                <ModalFooter
                  bsClass="modal-footer"
                  componentClass="div"
>
                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="default"
                                    disabled={false}
                                    onClick={[Function]}
                  >
                                    button.label
                  </Button>
</ModalFooter>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-header",
                  "children": <ModalTitle
                    bsClass="modal-title"
                    componentClass="h4"
>
                    foo
</ModalTitle>,
                  "closeButton": false,
                  "closeLabel": "Close",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "bsClass": "modal-title",
                    "children": "foo",
                    "componentClass": "h4",
                  },
                  "ref": null,
                  "rendered": "foo",
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-body",
                  "children": "bar",
                  "componentClass": "div",
                },
                "ref": null,
                "rendered": "bar",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-footer",
                  "children": Array [
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="default"
                      disabled={false}
                      onClick={[Function]}
>
                      button.label
</Button>,
                  ],
                  "componentClass": "div",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "Save",
                    "nodeType": "class",
                    "props": Object {
                      "active": false,
                      "block": false,
                      "bsClass": "btn",
                      "bsStyle": "default",
                      "children": "button.label",
                      "disabled": false,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "button.label",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "animation": true,
            "autoFocus": true,
            "backdrop": true,
            "bsClass": "modal",
            "children": <Unknown>
              <ModalHeader
                            bsClass="modal-header"
                            closeButton={false}
                            closeLabel="Close"
              >
                            <ModalTitle
                                          bsClass="modal-title"
                                          componentClass="h4"
                            />
              </ModalHeader>
              <ModalBody
                            bsClass="modal-body"
                            componentClass="div"
              />
              <ModalFooter
                            bsClass="modal-footer"
                            componentClass="div"
              >
                            
              </ModalFooter>
</Unknown>,
            "dialogComponentClass": [Function],
            "enforceFocus": true,
            "keyboard": true,
            "manager": ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            },
            "onHide": [Function],
            "renderBackdrop": [Function],
            "restoreFocus": true,
            "show": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ModalHeader
                  bsClass="modal-header"
                  closeButton={false}
                  closeLabel="Close"
>
                  <ModalTitle
                                    bsClass="modal-title"
                                    componentClass="h4"
                  />
</ModalHeader>,
                <ModalBody
                  bsClass="modal-body"
                  componentClass="div"
/>,
                <ModalFooter
                  bsClass="modal-footer"
                  componentClass="div"
>
                  
</ModalFooter>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-header",
                  "children": <ModalTitle
                    bsClass="modal-title"
                    componentClass="h4"
/>,
                  "closeButton": false,
                  "closeLabel": "Close",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "bsClass": "modal-title",
                    "children": "",
                    "componentClass": "h4",
                  },
                  "ref": null,
                  "rendered": "",
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-body",
                  "children": "",
                  "componentClass": "div",
                },
                "ref": null,
                "rendered": "",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "modal-footer",
                  "children": Array [],
                  "componentClass": "div",
                },
                "ref": null,
                "rendered": Array [],
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "class",
          "props": Object {
            "animation": true,
            "autoFocus": true,
            "backdrop": true,
            "bsClass": "modal",
            "children": <div>
              Test
</div>,
            "dialogComponentClass": [Function],
            "enforceFocus": true,
            "keyboard": true,
            "manager": ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            },
            "onHide": [Function],
            "renderBackdrop": [Function],
            "restoreFocus": true,
            "show": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Test",
            },
            "ref": null,
            "rendered": "Test",
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getSnapshotBeforeUpdate": true,
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
